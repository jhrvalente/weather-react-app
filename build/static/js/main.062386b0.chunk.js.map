{"version":3,"sources":["CityandTime.js","WeatherIcon.js","TodayWeather.js","NextDay.js","Forecast.js","Weather.js","App.js","serviceWorker.js","index.js"],"names":["CityandTime","props","now","Date","inputcity_timezone_offset","info","timezone","hours_of_inputcity","setHours","getUTCHours","time","weekday","getDay","hours","getHours","minutes","getMinutes","day","getDate","month","getMonth","year","getFullYear","className","id","city","WeatherIcon","codeMapping","size","icon","iconCode","color","animate","TodayWeather","unit","Math","round","temperature","humidity","wind","description","NextDay","date","daily","i","dt","tempMin","temp","min","tempMax","max","weather","convertFarhrenheit","Forecast","useState","loaded","setLoaded","forecast","setForecast","getForecast","response","data","lat","lon","forecast_api_URL","axios","get","then","search","Weather","cityDefault","setCity","ready","WeatherData","setWeatherData","setUnit","apiKey","getWeather","name","main","speed","coord","handleError","url","a","alert","getMyLocation","position","coords","latitude","longitude","type","onClick","navigator","geolocation","getCurrentPosition","onSubmit","event","preventDefault","placeholder","autoComplete","onChange","target","value","href","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.062386b0.chunk.js","sourcesContent":["import React from 'react';\r\nimport './CityandTime.css';\r\n\r\nfunction CityandTime(props) {\r\n    \r\n    let now = new Date();\r\n    let inputcity_timezone_offset = props.info.timezone; //offset in seconds between the input city's timezone and the UTC timezone\r\n    //note that UTC is the reference time zone and corresponds to the WINTER time in the greenwich meridian\r\n    let hours_of_inputcity = now.setHours(now.getUTCHours() + inputcity_timezone_offset/3600)\r\n\r\n    let week = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"];\r\n    let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\r\n    let time = new Date(hours_of_inputcity);\r\n    \r\n    let weekday = week[time.getDay()];\r\n    let hours = time.getHours();\r\n    let minutes = time.getMinutes();\r\n    let day = time.getDate();\r\n    let month = months[time.getMonth()];\r\n    let year = time.getFullYear();\r\n\r\n    if (minutes < 10) minutes = `0${minutes}`;\r\n    if (hours < 10) hours = `0${hours}`;\r\n\r\n    return(\r\n        <div className=\"CityandTime\">\r\n            <i className=\"fas fa-map-marker-alt\" />\r\n            <p id=\"city\"> {props.info.city} </p>\r\n            <p id=\"time\"> {hours}:{minutes}</p>\r\n            <p id=\"date\"> {weekday}, {day} {month} {year}</p>\r\n        </div> \r\n    );\r\n}\r\n\r\nexport default CityandTime;","import React from 'react';\r\n\r\nimport ReactAnimatedWeather from 'react-animated-weather';\r\n\r\nfunction WeatherIcon(props){\r\n    const codeMapping = {\r\n        \"01d\": \"CLEAR_DAY\",\r\n        \"01n\": \"CLEAR_NIGHT\",\r\n        \"02d\": \"PARTLY_CLOUDY_DAY\",\r\n        \"02n\": \"PARTLY_CLOUDY_NIGHT\",\r\n        \"03d\": \"PARTLY_CLOUDY_DAY\",\r\n        \"03n\": \"PARTLY_CLOUDY_NIGHT\",\r\n        \"04d\": \"CLOUDY\",\r\n        \"04n\": \"CLOUDY\",\r\n        \"09d\": \"RAIN\",\r\n        \"09n\": \"RAIN\",\r\n        \"10d\": \"RAIN\",\r\n        \"10n\": \"RAIN\",\r\n        \"11d\": \"RAIN\",\r\n        \"11n\": \"RAIN\",\r\n        \"13d\": \"SNOW\",\r\n        \"13n\": \"SNOW\",\r\n        \"50d\": \"FOG\",\r\n        \"50n\": \"FOG\"\r\n    };\r\n    if (props.size === \"small\"){\r\n        return(\r\n            <div className=\"WeatherIcon\">\r\n                <ReactAnimatedWeather\r\n                    icon={codeMapping[props.iconCode]}\r\n                    color={'white'}\r\n                    size={45}\r\n                    animate={true}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n    else {\r\n        return(\r\n            <div className=\"WeatherIcon\">\r\n                <ReactAnimatedWeather\r\n                    icon={codeMapping[props.iconCode]}\r\n                    color={'white'}\r\n                    size={70}\r\n                    animate={true}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default WeatherIcon;","import React from 'react';\r\nimport WeatherIcon from './WeatherIcon';\r\n\r\nimport './TodayWeather.css';\r\n\r\nfunction TodayWeather(props){\r\n\r\n    function convertToFahrenheit(){\r\n        let fahrenheit = (props.info.temperature* 9/5)+32;\r\n        return fahrenheit;\r\n    }\r\n   \r\n    if (props.unit === \"celsius\"){\r\n        return(\r\n            <div className=\"TodayWeather\" >\r\n                <div className=\"row\" id=\"rectangle\">\r\n                    <div className=\"col-3\">\r\n                        <WeatherIcon iconCode={props.info.icon}/> \r\n                    </div>   \r\n                    <div className=\"col-5\">\r\n                        <p id=\"temp\">{Math.round(props.info.temperature)} ºC </p>\r\n                    </div>\r\n                    <div className=\"col-4\">\r\n                        <i className=\"fas fa-tint\"/>\r\n                        <span id=\"humidity\">{props.info.humidity} % </span>\r\n                        <br />\r\n                        <i className=\"fas fa-wind\" />\r\n                        <span id=\"wind\">{Math.round(props.info.wind)} m/s </span>\r\n                    </div>\r\n                    <p id=\"description\">{props.info.description}</p>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n    else {\r\n        return(\r\n            <div className=\"TodayWeather\" >\r\n                <div className=\"row\" id=\"rectangle\">\r\n                    <div className=\"col-3\">\r\n                        <WeatherIcon iconCode={props.info.icon}/> \r\n                    </div>   \r\n                    <div className=\"col-5\">\r\n                        <p id=\"temp\">{Math.round(convertToFahrenheit())} F </p>\r\n                    </div>\r\n                    <div className=\"col-4\">\r\n                        <i className=\"fas fa-tint\"/>\r\n                        <span id=\"humidity\">{props.info.humidity} % </span>\r\n                        <br />\r\n                        <i className=\"fas fa-wind\"/>\r\n                        <span id=\"wind\">{Math.round(props.info.wind)} m/s </span>\r\n                    </div>\r\n                    <p id=\"description\">{props.info.description}</p>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TodayWeather;\r\n    ","import React from 'react';\r\nimport WeatherIcon from './WeatherIcon';\r\n\r\nimport './NextDay.css';\r\n\r\nfunction NextDay(props){\r\n    \r\n    function getDay(){\r\n        let day = (new Date(date*1000)).getDay();\r\n        let week = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"];\r\n        return week[day];\r\n    }\r\n\r\n    let date = props.info.daily[props.i].dt;\r\n    let tempMin = Math.round(props.info.daily[props.i].temp.min);\r\n    let tempMax = Math.round(props.info.daily[props.i].temp.max);\r\n    let icon = props.info.daily[props.i].weather[0].icon;\r\n    \r\n    function convertFarhrenheit(temp){\r\n        let fahrenheit = (temp*9/5 ) + 32;\r\n        return fahrenheit;\r\n    }\r\n\r\n    if (props.unit === \"celsius\"){\r\n        return(\r\n            <div className=\"NextDay\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-7\">\r\n                        <p id=\"day\"> {getDay()} </p>\r\n                        <p className=\"forecast\">\r\n                            <span id=\"max\"> {tempMax}ºC</span>\r\n                            <span> | </span> \r\n                            <span id=\"min\"> {tempMin} ºC </span>\r\n                        </p>\r\n                    </div>\r\n                    <div className=\"col-5\">\r\n                        <WeatherIcon  iconCode={icon} size=\"small\"/>\r\n                    </div>\r\n                </div>\r\n            </div> \r\n        );\r\n    }\r\n    else {\r\n        return(\r\n            <div className=\"NextDay\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-7\">\r\n                        <p id=\"day\"> {getDay()} </p>\r\n                        <p className=\"forecast\">\r\n                            <span id=\"max\"> {Math.round(convertFarhrenheit(tempMax))} F </span>\r\n                            <span>|</span> \r\n                            <span id=\"min\"> {Math.round(convertFarhrenheit(tempMin))} F </span>\r\n                        </p>\r\n                    </div>\r\n                    <div className=\"col-5\">\r\n                        <WeatherIcon  iconCode={icon} size=\"small\"/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NextDay;","import React, {useState} from \"react\";\r\nimport NextDay from './NextDay';\r\nimport axios from \"axios\";\r\n\r\nfunction Forecast(props){\r\n    const apiKey = \"fab5f60356d4f31a390522bd136e2a65\";\r\n    const [loaded, setLoaded] = useState (false);\r\n    const [forecast, setForecast] = useState(null);\r\n    \r\n    function getForecast(response){\r\n        setForecast(response.data);\r\n        setLoaded(true);\r\n    }\r\n\r\n    function search(){\r\n       let forecast_api_URL=`https://api.openweathermap.org/data/2.5/onecall?lat=${props.lat}&lon=${props.lon}&appid=${apiKey}&units=metric`;\r\n       axios.get(forecast_api_URL).then(getForecast);\r\n    }\r\n\r\n    if (loaded && props.lat === forecast.lat && props.lon === forecast.lon){\r\n        return (\r\n            <div>\r\n                <NextDay i={1} info={forecast} unit={props.unit} />\r\n                <NextDay i={2} info={forecast} unit={props.unit} />\r\n                <NextDay i={3} info={forecast} unit={props.unit} />\r\n                <NextDay i={4} info={forecast} unit={props.unit} />\r\n                <NextDay i={5} info={forecast} unit={props.unit} />\r\n                <NextDay i={6} info={forecast} unit={props.unit} />\r\n            </div>\r\n        );\r\n    }\r\n    else{\r\n        search();\r\n        return \"Loading...\"\r\n    } \r\n} \r\n    \r\nexport default Forecast;","import React, {useState} from 'react';\r\nimport axios from 'axios';\r\n\r\nimport CityandTime from './CityandTime';\r\nimport TodayWeather from './TodayWeather';\r\nimport Forecast from './Forecast';\r\n\r\nimport './Weather.css';\r\n\r\nfunction Weather(props) {\r\n    const [city, setCity]= useState(props.cityDefault);\r\n    const [WeatherData, setWeatherData] = useState({ready: false});\r\n    const [unit, setUnit] = useState(\"celsius\");\r\n    const apiKey = \"fab5f60356d4f31a390522bd136e2a65\";\r\n    \r\n    function getWeather(response) {\r\n        setWeatherData({\r\n            ready: true,\r\n            city: response.data.name,\r\n            temperature: response.data.main.temp, \r\n            wind: response.data.wind.speed, \r\n            humidity: response.data.main.humidity, \r\n            description: response.data.weather[0].description, \r\n            icon: response.data.weather[0].icon,\r\n            timezone: response.data.timezone,\r\n            lat: response.data.coord.lat,\r\n            lon: response.data.coord.lon\r\n        });\r\n    }\r\n\r\n    async function handleError(url) {\r\n        try {\r\n          await axios.get(url).then(getWeather);\r\n\r\n        } catch (error) {\r\n            alert(\"Sorry, something went wrong. Please, try again!\");\r\n        }\r\n    }\r\n\r\n    function getMyLocation(position) {\r\n        let lat = position.coords.latitude;\r\n        let lon = position.coords.longitude;\r\n        let url = `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&units=metric&appid=${apiKey}`;\r\n        handleError(url); \r\n    }\r\n    \r\n    function getPosition() {\r\n        navigator.geolocation.getCurrentPosition(getMyLocation);\r\n    }\r\n\r\n    function search() {\r\n        let url = `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${apiKey}&units=metric`;\r\n        handleError(url); \r\n    }\r\n\r\n    function handleSubmit(event) {\r\n        event.preventDefault();\r\n        search();\r\n    }\r\n    \r\n    function input(event) {\r\n        setCity(event.target.value);\r\n    }\r\n\r\n    function showCelsius(event) {\r\n        event.preventDefault();\r\n        setUnit(\"celsius\");\r\n    }\r\n    \r\n    function showFahrenheit(event) {\r\n        event.preventDefault();\r\n        setUnit(\"fahrenheit\");\r\n    }\r\n\r\n    if (WeatherData.ready) {\r\n        return (\r\n            <div className=\"weather\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-7\">\r\n                        <div className=\"today-block\">\r\n                            <h1 className=\"h1-todayweather\"> How is the weather today? </h1>\r\n                            <div className=\"row\">\r\n                                <div className=\"col-5\" >\r\n                                    <button \r\n                                    type=\"button\"\r\n                                    className=\"buttoncurrentcity\"\r\n                                    id=\"current-position\"\r\n                                    onClick={getPosition}>\r\n                                    Current Location\r\n                                    </button> \r\n                                </div>\r\n                                <div className=\"col-7\" >\r\n                                    <form onSubmit={handleSubmit}>\r\n                                        <input\r\n                                        type=\"text\"\r\n                                        placeholder=\"Enter a city here\"\r\n                                        className=\"entercity\"\r\n                                        autoComplete=\"off\"\r\n                                        id=\"city-input\"\r\n                                        onChange={input}/>\r\n                                        <input type=\"submit\" value=\"Search\" className=\"buttonsearch\" />\r\n                                    </form>\r\n                                </div>\r\n                            </div>\r\n                            <CityandTime info={WeatherData} />\r\n                            <TodayWeather info={WeatherData} unit={unit}/>\r\n                            <div className=\"Units\">\r\n                                <a href=\"/\" id=\"celsius\"  onClick={showCelsius}>ºC</a> | <a href=\"/\" id=\"fahrenheit\" onClick={showFahrenheit}>F</a>\r\n                            </div>\r\n                        </div>  \r\n                    </div>\r\n                \r\n                    <div className=\"col-5\">\r\n                        <div className=\"nextdays-block\">\r\n                            <h1 className=\"h1-nextdaysweather\">Next days</h1>\r\n                            <Forecast lat={WeatherData.lat} lon={WeatherData.lon} unit={unit} />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }    \r\n    else {\r\n        search();\r\n        return \"Loading...\"\r\n    }\r\n}\r\n\r\nexport default Weather;","import React from 'react';\nimport Weather from \"./Weather\";\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Weather cityDefault=\"Lisbon\"/>\n      <footer>\n        <a href=\"https://github.com/jhrvalente/weather-react-app\" target=\"_blank\"> Open-source project </a> coded by João Valente\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}